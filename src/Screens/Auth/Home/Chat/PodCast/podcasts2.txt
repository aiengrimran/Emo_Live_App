import React, {useRef, useState, useEffect} from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  View,
  Switch,
  Slider, // Import slider for volume control
} from 'react-native';
import {PermissionsAndroid, Platform} from 'react-native';
import {
  createAgoraRtcEngine,
  ChannelProfileType,
  ClientRoleType,
  AudienceLatencyLevelType,
  RtcSurfaceView,
  ClientRoleOptions,
  RtcConnection,
  IRtcEngineEventHandler,
  IRtcEngine,
} from 'react-native-agora';

const appId = 'cb178859ff01400d80dc40de177fedbc';
const token =
  '007eJxTYBB9FOkdLDDH8s/GKq+U8n5t7ZX+pSffe/vfb32/JGH14X4FhuQkQ3MLC1PLtDQDQxMDgxQLg5RkE4OUVENz87TUlKTkDbNL0xsCGRlEp2WxMDIwMrAAMQgwgUlmMMkCJUtSi0sYGbQAjJAfiA==';
const channelName = 'test';

const App = () => {
  const agoraEngineRef = useRef<IRtcEngine>(); // IRtcEngine instance
  const [isJoined, setIsJoined] = useState(false); // Whether the local user has joined the channel
  const [isHost, setIsHost] = useState(true); // User role
  const [remoteUid, setRemoteUid] = useState(0); // Uid of the remote user
  const [uid, setUid] = useState(0); // User prompt message
  const [message, setMessage] = useState(''); // User prompt message
  const [volume, setVolume] = useState(50); // Volume level

  useEffect(() => {
    setupVideoSDKEngine();
    return () => {
      agoraEngineRef.current?.release();
    };
  }, []);

  const setupVideoSDKEngine = async () => {
    try {
      if (Platform.OS === 'android') {
        await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
          PermissionsAndroid.PERMISSIONS.CAMERA,
        ]);
      }
      agoraEngineRef.current = createAgoraRtcEngine();
      const agoraEngine = agoraEngineRef.current;

      agoraEngine.initialize({appId});
      agoraEngine.enableLocalAudio(true);
      agoraEngine.setChannelProfile(
        ChannelProfileType.ChannelProfileLiveBroadcasting,
      );
      agoraEngine.registerEventHandler({
        onJoinChannelSuccess: () => {
          setIsJoined(true);
          showMessage('Successfully joined channel: ' + channelName);
        },
        onUserJoined: (_connection, uid) => {
          setRemoteUid(uid);
          showMessage('Remote user ' + uid + ' joined');
        },
        onUserOffline: (_connection, uid) => {
          setRemoteUid(0);
          showMessage('Remote user ' + uid + ' left');
        },
      });
    } catch (e) {
      console.error(e);
    }
  };

  const join = () => {
    if (isJoined) return;
    try {
      agoraEngineRef.current?.joinChannel(token, channelName, uid, {
        channelProfile: ChannelProfileType.ChannelProfileLiveBroadcasting,
        // clientRoleType: isHost
        //   ? ClientRoleType.ClientRoleBroadcaster
        //   : ClientRoleType.ClientRoleAudience,
        clientRoleType: 1,
        // clientRoleType: isHost
        //   ? ClientRoleType.ClientRoleBroadcaster
        //   : ClientRoleType.ClientRoleAudience,
        publishMicrophoneTrack: isHost,
        // publishMicrophoneTrack: isHost,
        autoSubscribeAudio: true,
      });
    } catch (e) {
      console.error(e);
    }
  };

  const leave = () => {
    try {
      agoraEngineRef.current?.leaveChannel();
      setIsJoined(false);
      setRemoteUid(0);
      showMessage('Left the channel');
    } catch (e) {
      console.error(e);
    }
  };

  const startPodcast = () => {
    agoraEngineRef.current?.setClientRole(ClientRoleType.ClientRoleBroadcaster);
    showMessage('Podcast started');
  };

  const stopPodcast = () => {
    agoraEngineRef.current?.setClientRole(ClientRoleType.ClientRoleAudience);
    showMessage('Podcast stopped');
  };

  const adjustVolume = value => {
    setVolume(value);
    agoraEngineRef.current?.adjustPlaybackSignalVolume(value);
    showMessage(`Volume set to ${value}`);
  };

  const showMessage = msg => {
    setMessage(msg);
  };

  return (
    <SafeAreaView style={styles.main}>
      <Text style={styles.head}>Agora Podcast Control</Text>
      <View style={styles.btnContainer}>
        <Text onPress={join} style={styles.button}>
          Join Channel
        </Text>
        <Text onPress={leave} style={styles.button}>
          Leave Channel
        </Text>
      </View>
      <View style={styles.btnContainer}>
        <Text>Audience</Text>
        <Switch
          onValueChange={switchValue => {
            setIsHost(switchValue);
            if (isJoined) leave();
          }}
          value={isHost}
        />
        <Text>Host</Text>
      </View>
      <View style={styles.btnContainer}>
        <Text onPress={startPodcast} style={styles.button}>
          Start Podcast
        </Text>
        <Text onPress={stopPodcast} style={styles.button}>
          Stop Podcast
        </Text>
      </View>
      <View style={styles.volumeControl}>
        <Text>Volume: {volume}</Text>
        <Text onPress={() => adjustVolume(60)}>+</Text>
        <Text onPress={() => adjustVolume(30)}>-</Text>
        {/* <Slider
          style={{width: 200, height: 40}}
          minimumValue={0}
          maximumValue={100}
          step={1}
          value={volume}
          onValueChange={adjustVolume}
        /> */}
      </View>
      <Text>{remoteUid}</Text>
      <ScrollView
        style={styles.scroll}
        contentContainerStyle={styles.scrollContainer}>
        <Text style={styles.info}>{message}</Text>
        {isJoined && isHost ? (
          // <RtcSurfaceView canvas={{uid: 0}} style={styles.videoView} />
          <View style={styles.videoView} />
        ) : (
          <Text>{isJoined ? 'Waiting for remote user' : 'Join a channel'}</Text>
        )}
        <View style={{marginVertical: 20}} />
        {remoteUid !== 0 && (
          <View style={styles.videoView}>
            <Text style={{color: '#fff'}}>nechec</Text>
          </View>
          // <RtcSurfaceView canvas={{uid: remoteUid}} style={styles.videoView} />
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  button: {
    paddingHorizontal: 25,
    paddingVertical: 4,
    fontWeight: 'bold',
    color: '#fff',
    backgroundColor: '#0055cc',
    margin: 5,
  },
  main: {flex: 1, alignItems: 'center'},
  scroll: {flex: 1, backgroundColor: '#ddeeff', width: '100%'},
  scrollContainer: {alignItems: 'center'},
  videoView: {width: '90%', height: 200, backgroundColor: 'red'},
  btnContainer: {flexDirection: 'row', justifyContent: 'center'},
  head: {fontSize: 20},
  info: {backgroundColor: '#ffffe0', paddingHorizontal: 8, color: '#0000ff'},
  volumeControl: {alignItems: 'center', marginVertical: 20},
});

export default App;
